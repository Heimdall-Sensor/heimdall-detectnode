#!/usr/bin/env python
PACKAGE = "heimdall_detectnode" 
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("enable_depth",         bool_t, 0, "Enable/disable Depth Processing/Detection.", False)
gen.add("enable_rgb",           bool_t, 0, "Enable/disable RGB Processing/Detection.", False)
gen.add("enable_pcl",           bool_t, 0, "Enable/disable PCL Processing/Detection.", True)
gen.add("enable_visualization", bool_t, 0, "Enable/disable visualization.", False)

gen.add("enable_debug_points",  bool_t, 0, "Enable/disable publishing of pointcloud for debugging purposes.", False)

gen.add("calibration_period", double_t, 0, "Calibration period (s)",                        5.0,  0,   100.0)

gen.add("dilate_size",    int_t,    0, "Kernel size of dilation.",                          1  ,  0,    30)
gen.add("erode_size",    int_t,    0, "Kernel size of erosion.",                            3  ,  0,    30)

gen.add("cc_size_threshold", double_t, 0, "Thresholding for connected components size.",   10.0,  0,  1000.0)

gen.add("rgb_dev_threshold", double_t, 0, "Thresholding for RGB deviation.",               100.0,  0,   100.0)
gen.add("depth_dev_threshold", double_t, 0, "Thresholding for Depth deviation.",            0.1,  0,   100.0)

gen.add("motion_duration", double_t, 0, "Duration to use to detect motion.",            1.5,  0,   30.0)

#The bed class:
gen.add("mask_bed_ub",    double_t, 0, "Upper notification threshold.",           0.50,  0.0,   1.5)
gen.add("mask_bed_lb",    double_t, 0, "Lower notification threshold.",           0.05,  0.0,   0.5)
gen.add("mask_bed_min",   double_t, 0, "Min. threshold for volume calculation.", -0.05, -1.0,   5.0)
gen.add("mask_bed_max",   double_t, 0, "Max. threshold for volume calculation.",  0.35,  0.0,   5.0)
#The manipulation class (indicates that somebody is touching/manipulating something (like a bookshelf)):
gen.add("mask_mani_ub",   double_t, 0, "Upper notification threshold.",           0.10,  0.0,   1.5)
gen.add("mask_mani_lb",   double_t, 0, "Lower notification threshold.",           0.05,  0.0,   0.5)
gen.add("mask_mani_min",  double_t, 0, "Min. threshold for volume calculation.", -0.10, -1.0,   5.0)
gen.add("mask_mani_max",  double_t, 0, "Max. threshold for volume calculation.",  0.10,  0.0,   5.0)
#The chair class (anything that you can sit on):
gen.add("mask_chair_ub",  double_t, 0, "Upper notification threshold.",           0.30,  0.0,   1.5)
gen.add("mask_chair_lb",  double_t, 0, "Lower notification threshold.",           0.10,  0.0,   0.5)
gen.add("mask_chair_min", double_t, 0, "Min. threshold for volume calculation.", -0.10, -1.0,   5.0)
gen.add("mask_chair_max", double_t, 0, "Max. threshold for volume calculation.",  0.50,  0.0,   5.0)
#The floor class:
gen.add("mask_floor_ub",  double_t, 0, "Upper notification threshold.",           0.50,  0.0,   1.5)
gen.add("mask_floor_lb",  double_t, 0, "Lower notification threshold.",           0.10,  0.0,   0.5)
gen.add("mask_floor_min", double_t, 0, "Min. threshold for volume calculation.", -0.10, -1.0,   5.0)
gen.add("mask_floor_max", double_t, 0, "Max. threshold for volume calculation.",  0.30,  0.0,   5.0)
#The door class (special detection which take transistions into acount):
gen.add("mask_door_ub",   double_t, 0, "Upper notification threshold.",           0.10,  0.0,   2.0)
gen.add("mask_door_lb",   double_t, 0, "Lower notification threshold.",           0.10, -2.0,   0.0)
gen.add("mask_door_min",  double_t, 0, "Min. threshold for volume calculation.", -0.40, -1.0,   5.0)
gen.add("mask_door_max",  double_t, 0, "Max. threshold for volume calculation.",  0.40,  0.0,   5.0)

gen.add("mask_distance_threshold", double_t, 0, "Threshold from which distance/stds changes should be ignored with the mask.",            300.0,  0,   1000.0)

exit(gen.generate(PACKAGE, "detect_node", "DetectNode"))
